-- Non terminals(tokens) named by uppercase letters
-- E means nothing


+
program   :: declList
declList  :: decl declList'
declList' :: decl declList' | E
decl      :: varDecl | funcDecl

+
varDecl       :: typeSpec varDeclList;
scopedVarDecl :: static typeSpec varDeclList; | typeSpec varDeclList; 
typeSpec      :: INT | BOOL | CHAR
varDeclList   :: varDeclInit varDeclList'
varDeclList'  :: E | , varDeclInit varDeclList'
varDeclInit   :: varDeclId | varDeclId: simpleExpr
varDeclId     :: ID | ID [NUMCONST]

+
funcDecl     :: typeSpec ID ( parms ) stmt
parms        :: parmList | E
parmList     :: parmTypeList parmList'
parmList'    :: E | , parmTypeList parmList'
parmTypeList :: typeSpec parmId
parmId       :: ID | ID[]

-
stmt         :: exprStmt | compoundStmt | iterStmt | returnStmt | breakStmt 
exprStmt     :: expr; | ;
compoundStmt :: { localDecls stmtList }
stmtList     :: stmtList stmt | E
localDecls   :: localDecls scopedVarDecl | E
iterStmt     :: while(simpleExpr) stmt
returnStmt   :: return ; | return exp ;
breakStmt    :: break ;

-
expr         :: mutable = expr | mutable = expr | mutable ++ | mutable -- | simpleExpr
simpleExpr   :: simpleExpr OR andExp | and Exp
adnExpr      :: andExpr and unaryRelExpr | unaryRelExpr
unaryRelExpr :: NOT unaryRelExpr | relExpr

relExpr :: sumExpr
sumExpr :: sumExpr sumOp mulExpr | mulExpr
mulExpr :: mulExpr mulOp factor | factor
sumOp   :: + | -
mulOp   :: * | / | %

factor      :: mutable | immutable 
mutable     :: ID | ID[exp]
immutable   :: ( expr ) | call | constant
call        :: ID(args)
args        :: argsList | E
argsList    :: argsList , exp | exp
constant    :: NUMCONSTANT | CHARCONSTANT | STRINGCONSTANT



 
