program   :: decl
decl      :: varDecl | funcDecl

varDecl       :: typeSpec varDeclInit ';'
typeSpec      :: 'int' | 'bool' | 'char'
varDeclInit   :: varDeclId | varDeclId '=' simpleExpr
varDeclId     :: ID | ID '[' NUMCONST ']'

funcDecl     :: typeSpec ID '(' parms ')' stmt
parms        :: parmList | 'E'
parmList     :: parmType parmListN
parmListN    :: 'E' | ',' parmType parmListN
parmType     :: typeSpec ID


********************
stmt         :: exprStmt | compoundStmt | iterStmt | returnStmt | breakStmt 
exprStmt     :: expr ';' | ';'
compoundStmt :: '{' localDecls stmtList '}'
stmtList     :: stmtList stmt | 'E'
localDecls   :: localDecls scopedVarDecl | 'E'
iterStmt     :: 'while' '(' simpleExpr ')' stmt
returnStmt   :: 'return' ';' | return exp ';'
breakStmt    :: break ;

#-
expr         :: mutable = expr | mutable = expr | mutable ++ | mutable -- | simpleExpr
simpleExpr   :: simpleExpr OR andExpr | and Exp
andExpr      :: andExpr and unaryRelExpr | unaryRelExpr
unaryRelExpr :: NOT unaryRelExpr | relExpr

relExpr :: sumExpr
sumExpr :: sumExpr sumOp mulExpr | mulExpr
mulExpr :: mulExpr mulOp factor | factor
sumOp   :: + | -
mulOp   :: * | / | %

factor      :: mutable | immutable 
mutable     :: ID | ID[expr]
immutable   :: ( expr ) | call | constant
call        :: ID(args)
args        :: argsList | E
argsList    :: argsList , expr | expr
constant    :: NUMCONSTANT | CHARCONSTANT | STRINGCONSTANT
