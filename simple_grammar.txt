***
program   :: declList
declList  :: decl 
decl      :: varDecl | funcDecl

***
varDecl       :: typeSpec varDeclInit ';'
scopedVarDecl :: 'static' typeSpec varDeclList ';' | typeSpec varDeclList ';' 
typeSpec      :: 'INT' | 'BOOL' | 'CHAR'
varDeclInit   :: varDeclId | varDeclId ':' simpleExpr
varDeclId     :: 'ID' | 'ID' '[' 'NUMCONST' ']'

***
funcDecl     :: typeSpec 'ID' '(' parms ')' stmt
parms        :: parmList | 'E'
parmList     :: parmType
parmType     :: typeSpec parmId
parmId       :: 'ID'

***
stmt         :: exprStmt | compoundStmt | iterStmt | returnStmt | breakStmt 
exprStmt     :: expr ';' | ';'
compoundStmt :: '{' localDecls stmtList '}'

stmtList     :: stmt stmtListN
stmtListN    :: stmt | 'E'
localDecl   :: scopedVarDecl localDeclN | 'E'
localDeclN  :: scopedVarDecl localDeclN | 'E'

iterStmt     :: 'while' '(' simpleExpr ')' stmt
returnStmt   :: 'return' ';' | 'return' exp ';'
breakStmt    :: 'break' ';'

***
expr         :: mutable '=' expr | mutable '=' expr | mutable '++' | mutable '--' | simpleExpr
simpleExpr   :: andExpr simpleExprN
simpleExprN  :: OR andExpr simplExprN | 'E'
andExpr      :: unaryRelExpr andExprN
andExprN     :: and unaryRelExpr andExprN | 'E'
unaryRelExpr :: NOT unaryRelExpr | relExpr

***
relExpr :: sumExpr
sumExpr :: mulExpr sumExprN
sumExprN :: sumOp mulExpr sumExprN | 'E'

mulExpr :: mulExpr mulOp factor | factor
sumOp   :: '+' | '-'
mulOp   :: '*' | '/' | '%'

factor      :: mutable | immutable 
mutable     :: 'ID' | 'ID' '[' expr ']'
immutable   :: '(' expr ')' | call | constant
call        :: 'ID' '(' args ')'
args        :: argsList | 'E'
argsList    :: argsList ',' expr | expr
constant    :: 'NUMCONSTANT' | 'CHARCONSTANT' | 'STRINGCONSTANT'
